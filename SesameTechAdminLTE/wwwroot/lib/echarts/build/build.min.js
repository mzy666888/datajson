/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/echarts@4.5.0/build/build.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
#!/usr/bin/env node
const fsExtra=require("fs-extra"),fs=require("fs"),{resolve:resolve}=require("path"),config=require("./config.js"),commander=require("commander"),{build:build,watch:watch,color:color}=require("zrender/build/helper"),ecLangPlugin=require("./rollup-plugin-ec-lang"),prePublish=require("./pre-publish"),recheckDEV=require("zrender/build/babel-plugin-transform-remove-dev").recheckDEV;function run(){let e="                                 ";commander.usage("[options]").description(["Build echarts and generate result files in directory `echarts/dist`.","","  For example:","","    node build/build.js --release\n"+e+"# Build all to `dist` folder.","    node build/build.js --prepublish\n"+e+"# Only prepublish.","    node build/build.js --removedev\n"+e+"# Remove __DEV__ code. If --min, __DEV__ always be removed.",'    node build/build.js --type ""\n'+e+"# Only generate `dist/echarts.js`.","    node build/build.js --type common --min\n"+e+"# Only generate `dist/echarts.common.min.js`.","    node build/build.js --type simple --min --lang en\n"+e+"# Only generate `dist/echarts-en.simple.min.js`.",'    node build/build.js --lang "my/lang.js" -i "my/index.js" -o "my/bundle.js"\n'+e+"# Take `<cwd>/my/index.js` as input and generate `<cwd>/my/bundle.js`,\n"+e+"where `<cwd>/my/lang.js` is used as language file."].join("\n")).option("-w, --watch",["Watch modifications of files and auto-compile to dist file. For example,",e+"`echarts/dist/echarts.js`."].join("\n")).option("--lang <language file path or shortcut>",["Use the specified file instead of `echarts/src/lang.js`. For example:",e+"`--lang en` will use `echarts/src/langEN.js`.",e+"`--lang my/langDE.js` will use `<cwd>/my/langDE.js`. -o must be specified in this case.",e+"`--lang /my/indexSW.js` will use `/my/indexSW.js`. -o must be specified in this case."].join("\n")).option("--release","Build all for release").option("--prepublish","Build all for release").option("--removedev","Remove __DEV__ code. If --min, __DEV__ always be removed.").option("--min","Whether to compress the output file, and remove error-log-print code.").option("--type <type name>",['Can be "simple" or "common" or "" (default). For example,',e+'`--type ""` or `--type "common"`.'].join("\n")).option("--sourcemap","Whether output sourcemap.").option("--format <format>",'The format of output bundle. Can be "umd", "amd", "iife", "cjs", "es".').option("-i, --input <input file path>","If input file path is specified, output file path must be specified too.").option("-o, --output <output file path>","If output file path is specified, input file path must be specified too.").parse(process.argv);let n=!!commander.watch,i=!!commander.release,o=!!commander.prepublish,t={lang:commander.lang,min:commander.min,type:commander.type||"",input:commander.input,output:commander.output,format:commander.format,sourcemap:commander.sourcemap,removeDev:commander.removedev,addBundleVersion:n};if(validateIO(t.input,t.output),validateLang(t.lang,t.output),normalizeParams(t),i&&fsExtra.removeSync(getPath("./dist")),n)watch(config.createECharts(t));else if(o)prePublish();else if(i){let e,n=[];[{min:!1},{min:!0},{min:!1,lang:"en"},{min:!0,lang:"en"}].forEach(function(i){["","simple","common"].forEach(function(o){let t=Object.assign({type:o},i);normalizeParams(t);let r=config.createECharts(t);n.push(r),t.min&&""===t.type&&(e=r)})}),n.push(config.createBMap(!1),config.createBMap(!0),config.createDataTool(!1),config.createDataTool(!0)),build(n).then(function(){checkCode(e),prePublish()}).catch(handleBuildError)}else{let e=config.createECharts(t);build([e]).then(function(){t.removeDev&&checkCode(e)}).catch(handleBuildError)}}function normalizeParams(e){null==e.sourcemap&&(e.sourcemap=!(e.min||e.type)),null==e.removeDev&&(e.removeDev=!!e.min)}function handleBuildError(e){console.log(e)}function checkCode(e){let n=fs.readFileSync(e.output.file,{encoding:"utf-8"});if(!n)throw new Error(`${e.output.file} is empty`);recheckDEV(n),console.log(color("fgGreen","dim")("Check code: correct."))}function validateIO(e,n){if(null!=e&&null==n||null==e&&null!=n)throw new Error("`input` and `output` must be both set.")}function validateLang(e,n){if(!e)return;let i=ecLangPlugin.getLangFileInfo(e);if(i.isOuter&&!n)throw new Error("`-o` or `--output` must be specified if using a file path in `--lang`.");if(!i.absolutePath||!fs.statSync(i.absolutePath).isFile())throw new Error(`File ${i.absolutePath} does not exist yet. Contribution is welcome!`)}function getPath(e){return resolve(__dirname,"../",e)}run();
//# sourceMappingURL=/sm/a40048464787610bdf4fb886fca81172ba6e5eed203859d690cea461de3feec4.map